{"version":1,"Request":{"Prompt":"reescribime la clase FuncionService par moverla de la capa de presentacion a la capa de aplicacion:\r\n\r\n public class FuncionService\r\n {\r\n     private readonly CineDdContext _context;\r\n\r\n     public FuncionService(  CineDdContext context)\r\n     \r\n     {\r\n         _context = context;\r\n     }\r\n     public void CreateFuncion(Funcion nuevaFuncion)\r\n     {\r\n         _context.Funciones.Add(nuevaFuncion);\r\n         _context.SaveChanges();\r\n     }\r\n\r\n     public List\u003CFuncion\u003E GetAllFunciones()\r\n     {\r\n         return _context.Funciones.ToList();\r\n     }\r\n\r\n     public List\u003CPelicula\u003E GetAllPeliculas()\r\n     {\r\n         return _context.Peliculas.ToList();\r\n     }\r\n\r\n     public List\u003CSala\u003E GetAllSalas()\r\n     {\r\n         return _context.Salas.ToList();\r\n     }\r\n     public string GetPeliculaTituloById(int peliculaId)\r\n     {\r\n         // Utiliza tu DbContext para consultar la base de datos y obtener el t\u00EDtulo de la pel\u00EDcula\r\n         var pelicula = _context.Peliculas.FirstOrDefault(p =\u003E p.PeliculaId == peliculaId);\r\n\r\n         if (pelicula != null)\r\n         {\r\n             return pelicula.Titulo;\r\n         }\r\n         else\r\n         {\r\n             // Manejar el caso en el que el ID de la pel\u00EDcula no existe\r\n             return \u0022Pel\u00EDcula no encontrada\u0022;\r\n         }\r\n     }\r\n\r\n     public string GetSalaNombreById(int salaId)\r\n     {\r\n\r\n         var sala = _context.Salas.FirstOrDefault(s =\u003E s.SalaId == salaId);\r\n\r\n         if (sala != null)\r\n         {\r\n             return sala.Nombre;\r\n         }\r\n         else\r\n         {\r\n             // Manejar el caso en el que el ID de la sala no existe\r\n             return \u0022Sala no encontrada\u0022;\r\n         }\r\n     }\r\n\r\n     public string GetGeneroNombreById(int peliculaId)\r\n     {\r\n         /*  Recibe un generoId como par\u00E1metro y busca en la base de datos \r\n          *  el g\u00E9nero correspondiente al ID proporcionado. \r\n          *  Si encuentra el g\u00E9nero, devuelve su nombre; de lo contrario\r\n          *  , devuelve un mensaje indicando que el g\u00E9nero no se encontr\u00F3. */\r\n         var genero = _context.Generos.FirstOrDefault(g =\u003E g.GeneroId == peliculaId);\r\n         if (genero != null)\r\n\r\n         {\r\n             return genero.Nombre;\r\n         }\r\n         else\r\n         {\r\n             // Manejar el caso en el que el ID de la sala no existe\r\n             return \u0022\u00BFGenero NULL?\u0022;\r\n         }\r\n\r\n     }\r\n\r\n     public List\u003CFuncion\u003E GetFuncionesPorFechaYPelicula(DateTime? fecha, string tituloPelicula)\r\n     {\r\n         IQueryable\u003CFuncion\u003E query = _context.Funciones.Include(f =\u003E f.Peliculas).Include(f =\u003E f.Salas);\r\n\r\n         if (fecha.HasValue)\r\n         {\r\n             query = query.Where(f =\u003E f.Fecha.Date == fecha.Value.Date);\r\n         }\r\n\r\n         if (!string.IsNullOrEmpty(tituloPelicula))\r\n         {\r\n             query = query.Where(f =\u003E f.Peliculas.Titulo.Contains(tituloPelicula));\r\n         }\r\n\r\n         return query.ToList();\r\n     }\r\n\r\n     public List\u003CFuncion\u003E GetFuncionesPorFecha(DateTime fecha)\r\n     {\r\n         IQueryable\u003CFuncion\u003E query = _context.Funciones.Include(f =\u003E f.Peliculas)\r\n                                                       .Include(f =\u003E f.Salas);\r\n\r\n         query = query.Where(f =\u003E f.Fecha.Date == fecha.Date);\r\n\r\n         return query.ToList();\r\n     }\r\n\r\n     public List\u003CFuncion\u003E GetFuncionesPorPelicula(int peliculaId)\r\n     {\r\n         IQueryable\u003CFuncion\u003E query = _context.Funciones.Include(f =\u003E f.Peliculas).Include(f =\u003E f.Salas);\r\n\r\n         query = query.Where(f =\u003E f.PeliculaId == peliculaId);\r\n\r\n         return query.ToList();\r\n     }\r\n\r\n }","Context":{"VisibleDocuments":[{"Content":"\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Domain;\r\nusing Infrastructure;\r\n\r\nnamespace PSCineGBA.Controller\r\n{\r\n    public class FuncionService\r\n    {\r\n        private readonly CineDdContext _context;\r\n\r\n        public FuncionService(  CineDdContext context)\r\n        \r\n        {\r\n            _context = context;\r\n        }\r\n        public void CreateFuncion(Funcion nuevaFuncion)\r\n        {\r\n            _context.Funciones.Add(nuevaFuncion);\r\n            _context.SaveChanges();\r\n        }\r\n\r\n        public List\u003CFuncion\u003E GetAllFunciones()\r\n        {\r\n            return _context.Funciones.ToList();\r\n        }\r\n\r\n        public List\u003CPelicula\u003E GetAllPeliculas()\r\n        {\r\n            return _context.Peliculas.ToList();\r\n        }\r\n\r\n        public List\u003CSala\u003E GetAllSalas()\r\n        {\r\n            return _context.Salas.ToList();\r\n        }\r\n        public string GetPeliculaTituloById(int peliculaId)\r\n        {\r\n            // Utiliza tu DbContext para consultar la base de datos y obtener el t\u00EDtulo de la pel\u00EDcula\r\n            var pelicula = _context.Peliculas.FirstOrDefault(p =\u003E p.PeliculaId == peliculaId);\r\n\r\n            if (pelicula != null)\r\n            {\r\n                return pelicula.Titulo;\r\n            }\r\n            else\r\n            {\r\n                // Manejar el caso en el que el ID de la pel\u00EDcula no existe\r\n                return \u0022Pel\u00EDcula no encontrada\u0022;\r\n            }\r\n        }\r\n\r\n        public string GetSalaNombreById(int salaId)\r\n        {\r\n\r\n            var sala = _context.Salas.FirstOrDefault(s =\u003E s.SalaId == salaId);\r\n\r\n            if (sala != null)\r\n            {\r\n                return sala.Nombre;\r\n            }\r\n            else\r\n            {\r\n                // Manejar el caso en el que el ID de la sala no existe\r\n                return \u0022Sala no encontrada\u0022;\r\n            }\r\n        }\r\n\r\n        public string GetGeneroNombreById(int peliculaId)\r\n        {\r\n            /*  Recibe un generoId como par\u00E1metro y busca en la base de datos \r\n             *  el g\u00E9nero correspondiente al ID proporcionado. \r\n             *  Si encuentra el g\u00E9nero, devuelve su nombre; de lo contrario\r\n             *  , devuelve un mensaje indicando que el g\u00E9nero no se encontr\u00F3. */\r\n            var genero = _context.Generos.FirstOrDefault(g =\u003E g.GeneroId == peliculaId);\r\n            if (genero != null)\r\n\r\n            {\r\n                return genero.Nombre;\r\n            }\r\n            else\r\n            {\r\n                // Manejar el caso en el que el ID de la sala no existe\r\n                return \u0022\u00BFGenero NULL?\u0022;\r\n            }\r\n\r\n        }\r\n\r\n        public List\u003CFuncion\u003E GetFuncionesPorFechaYPelicula(DateTime? fecha, string tituloPelicula)\r\n        {\r\n            IQueryable\u003CFuncion\u003E query = _context.Funciones.Include(f =\u003E f.Peliculas).Include(f =\u003E f.Salas);\r\n\r\n            if (fecha.HasValue)\r\n            {\r\n                query = query.Where(f =\u003E f.Fecha.Date == fecha.Value.Date);\r\n            }\r\n\r\n            if (!string.IsNullOrEmpty(tituloPelicula))\r\n            {\r\n                query = query.Where(f =\u003E f.Peliculas.Titulo.Contains(tituloPelicula));\r\n            }\r\n\r\n            return query.ToList();\r\n        }\r\n\r\n        public List\u003CFuncion\u003E GetFuncionesPorFecha(DateTime fecha)\r\n        {\r\n            IQueryable\u003CFuncion\u003E query = _context.Funciones.Include(f =\u003E f.Peliculas)\r\n                                                          .Include(f =\u003E f.Salas);\r\n\r\n            query = query.Where(f =\u003E f.Fecha.Date == fecha.Date);\r\n\r\n            return query.ToList();\r\n        }\r\n\r\n        public List\u003CFuncion\u003E GetFuncionesPorPelicula(int peliculaId)\r\n        {\r\n            IQueryable\u003CFuncion\u003E query = _context.Funciones.Include(f =\u003E f.Peliculas).Include(f =\u003E f.Salas);\r\n\r\n            query = query.Where(f =\u003E f.PeliculaId == peliculaId);\r\n\r\n            return query.ToList();\r\n        }\r\n\r\n    }\r\n}\r\n","Selections":[{"Caret":3979,"Start":239,"End":3979}],"FilePath":"C:\\Users\\aacar\\source\\repos\\CineConsole\\CineConsole\\CineConsole\\Controller\\FuncionService.cs","Language":"C#"}],"PreSelectedSkill":null,"CorrelationId":{"Guid":"ae81a27f-e912-492c-9ca0-59514912a5a8"}}},"Response":{"Content":"\u0060\u0060\u0060C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Domain\n{\n    public class FuncionService\n    {\n        private readonly CineDdContext _context;\n\n        public FuncionService(CineDdContext context)\n        {\n            _context = context;\n        }\n\n        public void CreateFuncion(Funcion nuevaFuncion)\n        {\n            _context.Funciones.Add(nuevaFuncion);\n            _context.SaveChanges();\n        }\n\n        public List\u003CFuncion\u003E GetAllFunciones()\n        {\n            return _context.Funciones.ToList();\n        }\n\n        public List\u003CPelicula\u003E GetAllPeliculas()\n        {\n            return _context.Peliculas.ToList();\n        }\n\n        public List\u003CSala\u003E GetAllSalas()\n        {\n            return _context.Salas.ToList();\n        }\n\n        public string GetPeliculaTituloById(int peliculaId)\n        {\n            // Utiliza tu DbContext para consultar la base de datos y obtener el t\u00EDtulo de la pel\u00EDcula\n            var pelicula = _context.Peliculas.FirstOrDefault(p =\u003E p.PeliculaId == peliculaId);\n\n            if (pelicula != null)\n            {\n                return pelicula.Titulo;\n            }\n            else\n            {\n                // Manejar el caso en el que el ID de la pel\u00EDcula no existe\n                return \u0022Pel\u00EDcula no encontrada\u0022;\n            }\n        }\n\n        public string GetSalaNombreById(int salaId)\n        {\n            var sala = _context.Salas.FirstOrDefault(s =\u003E s.SalaId == salaId);\n\n            if (sala != null)\n            {\n                return sala.Nombre;\n            }\n            else\n            {\n                // Manejar el caso en el que el ID de la sala no existe\n                return \u0022Sala no encontrada\u0022;\n            }\n        }\n\n        public string GetGeneroNombreById(int peliculaId)\n        {\n            /*  Recibe un generoId como par\u00E1metro y busca en la base de datos \n              *  el g\u00E9nero correspondiente al ID proporcionado. \n              *  Si encuentra el g\u00E9nero, devuelve su nombre; de lo contrario\n              *  , devuelve un mensaje indicando que el g\u00E9nero no se encontr\u00F3. */\n            var genero = _context.Generos.FirstOrDefault(g =\u003E g.GeneroId == peliculaId);\n\n            if (genero != null)\n            {\n                return genero.Nombre;\n            }\n            else\n            {\n                // Manejar el caso en el que el ID de la sala no existe\n                return \u0022\u00BFGenero NULL?\u0022;\n            }\n\n        }\n\n        public List\u003CFuncion\u003E GetFuncionesPorFechaYPelicula(DateTime? fecha, string tituloPelicula)\n        {\n            IQueryable\u003CFuncion\u003E query = _context.Funciones.Include(f =\u003E f.Peliculas).Include(f =\u003E f.Salas);\n\n            if (fecha.HasValue)\n            {\n                query = query.Where(f =\u003E f.Fecha.Date == fecha.Value.Date);\n            }\n\n            if (!string.IsNullOrEmpty(tituloPelicula))\n            {\n                query = query.Where(f =\u003E f.Peliculas.Titulo.Contains(tituloPelicula));\n            }\n\n            return query.ToList();\n        }\n\n        public List\u003CFuncion\u003E GetFuncionesPorFecha(DateTime fecha)\n        {\n            IQueryable\u003CFuncion\u003E query = _context.Funciones.Include(f =\u003E f.Peliculas).Include(f =\u003E f.Salas);\n\n            query = query.Where(f =\u003E f.Fecha.Date == fecha.Date);\n\n            return query.ToList();\n        }\n\n        public List\u003CFuncion\u003E GetFuncionesPorPelicula(int peliculaId)\n        {\n            IQueryable\u003CFuncion\u003E query = _context.Funciones.Include(f =\u003E f.Peliculas).Include(f =\u003E f.Salas);\n\n            query = query.Where(f =\u003E f.PeliculaId == peliculaId);\n\n            return query.ToList();\n        }\n    }\n}\n\u0060\u0060\u0060","Type":1,"Status":1,"FollowUpPrompts":null},"SelectedFunctionName":"Modify","LoggedSkillInvocations":null}
{"version":1,"Request":{"Prompt":"Explicar lo siguiente: selected lines: \r\nusing Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\n\r\n\r\n\r\n\r\npublic partial class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);\r\n        // Crear una instancia de FuncionesServices\r\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\r\n\r\n        var salasQuery = new SalasQuery(context);\r\n        // Crear una instancia de SalasService\r\n        var salasService = new SalasService( salasQuery);\r\n\r\n        var peliculasQuery = new PeliculaQuery(context);\r\n        // Crear una instancia de PeliculaService\r\n        var peliculasService = new PeliculasService( peliculasQuery);\r\n\r\n        var generoService = new GeneroService(generoQuery);\r\n\r\n\r\n        {\r\n            while (true)\r\n            {\r\n                Console.Clear();\r\n\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 Cine GBA\u0022);\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n                Console.WriteLine(\u0022 -----------------\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n                Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n                Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n                Console.WriteLine(\u0022 4. Salir \u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022******************************\u0022);\r\n                Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n                char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n                Console.WriteLine();\r\n\r\n                switch (option)\r\n                {\r\n\r\n                    case \u00271\u0027:\r\n\r\n                        var nuevaFuncion = new Funcion();\r\n\r\n                        Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\r\n                        DateTime fecha;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out fecha))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Fecha = fecha;\r\n\r\n                        Console.Write(\u0022Horario (HH:mm:ss): \u0022);\r\n                        DateTime horario;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out horario))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Horario no v\u00E1lido. Ingrese un horario en el formato HH:mm:ss.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Horario = horario;\r\n\r\n                        // Listar peliculas disponibles\r\n                        var todaslaspeliculas = peliculasService.GetAllPeliculas();\r\n                        Console.WriteLine(\u0022Peliculas disponibles:\u0022);\r\n                        foreach (var pelicula in todaslaspeliculas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                        }\r\n\r\n                        int peliculaId;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                Console.Write(\u0022Seleccione la pel\u00EDcula (ID): \u0022);\r\n                                if (int.TryParse(Console.ReadLine(), out peliculaId))\r\n                                {\r\n                                    if (todaslaspeliculas.Any(p =\u003E p.PeliculaId == peliculaId))\r\n                                        break;\r\n                                    else\r\n                                        throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                                else\r\n                                {\r\n                                    throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                                }\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.PeliculaId = peliculaId;\r\n\r\n                        // salas disponibles\r\n                        List\u003CSala\u003E salas = salasService.GetAllSalas();\r\n                        Console.WriteLine(\u0022Salas disponibles:\u0022);\r\n                        foreach (var sala in salas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {sala.SalaId}, Nombre: {sala.Nombre}\u0022);\r\n                        }\r\n\r\n                        int salaId;\r\n                        while (true)\r\n                        {\r\n                            Console.Write(\u0022Seleccione la sala (ID): \u0022);\r\n                            if (int.TryParse(Console.ReadLine(), out salaId))\r\n                            {\r\n                                if (salas.Any(s =\u003E s.SalaId == salaId))\r\n                                {\r\n                                    break;\r\n                                }\r\n                                else\r\n                                {\r\n                                    Console.WriteLine(\u0022ID de sala no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022ID de sala no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.SalaId = salaId;\r\n\r\n                        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n                        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                        \r\n                        string peliculaTitulo = peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        string salaNombre = salasService.GetSalaNombreById(nuevaFuncion.SalaId);\r\n                        \r\n                        string generoNombre = generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n                        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n                        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n\r\n                        funcionesServices.CreateFuncion(nuevaFuncion);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n                        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                        Console.ReadKey();\r\n\r\n\r\n\r\n\r\n                        break;\r\n\r\n                    case \u00272\u0027:\r\n\r\n                        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n                        // Traer todas las pel\u00EDculas disponibles\r\n                        var peliculas = peliculasService.GetAllPeliculas();\r\n\r\n                        if (peliculas.Any())\r\n                        {\r\n                            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n                            foreach (var pelicula in peliculas)\r\n                            {\r\n                                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                            }\r\n\r\n                            int seleccion;\r\n                            while (true)\r\n                            {\r\n                                try\r\n                                {\r\n                                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                                    {\r\n                                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                                        {\r\n                                            break;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Console.WriteLine(\u0022ID invalido\u0022);\r\n                                    }\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Console.WriteLine(ex.Message);\r\n                                }\r\n                            }\r\n\r\n                            //  Mostrar las funciones para la pel\u00EDcula seleccionada\r\n                            var funcionesPorPelicula = funcionesServices.GetFuncionesPorPelicula(seleccion);\r\n\r\n                            if (funcionesPorPelicula.Any())\r\n                            {\r\n\r\n                                Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {seleccion}):\u0022);\r\n\r\n                                foreach (var funcion in funcionesPorPelicula)\r\n                                {\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\r\n                                    Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\r\n                                    Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n\r\n                        break;\r\n\r\n\r\n                    case \u00273\u0027:\r\n                        // Listar funciones por d\u00EDa y/o t\u00EDtulo de pel\u00EDcula\r\n                        Console.WriteLine(\u0022Bienvenido al buscador de funciones\u0022);\r\n                        Console.Write(\u0022Ingrese la fecha (YYYY-MM-DD): \u0022);\r\n                        string fechaStr = Console.ReadLine();\r\n                        DateTime? fechaFiltro = null;\r\n\r\n                        if (!string.IsNullOrEmpty(fechaStr) \u0026\u0026 DateTime.TryParse(fechaStr, out DateTime fechaSeleccionada))\r\n                        {\r\n                            fechaFiltro = fechaSeleccionada;\r\n                        }\r\n\r\n                        if (fechaFiltro.HasValue)\r\n                        {\r\n                            var funcionesFiltradas = funcionesServices.GetFuncionesPorFecha(fechaFiltro.Value);\r\n\r\n                            if (funcionesFiltradas.Any())\r\n                            {\r\n                                foreach (var funcion in funcionesFiltradas)\r\n                                {\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022Fecha no v\u00E1lida.\u0022);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \u00274\u0027:\r\n                        return;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","Context":{"VisibleDocuments":[{"Content":"using Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\n\r\n\r\n\r\n\r\npublic partial class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);\r\n        // Crear una instancia de FuncionesServices\r\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\r\n\r\n        var salasQuery = new SalasQuery(context);\r\n        // Crear una instancia de SalasService\r\n        var salasService = new SalasService( salasQuery);\r\n\r\n        var peliculasQuery = new PeliculaQuery(context);\r\n        // Crear una instancia de PeliculaService\r\n        var peliculasService = new PeliculasService( peliculasQuery);\r\n\r\n        var generoService = new GeneroService(generoQuery);\r\n\r\n\r\n        {\r\n            while (true)\r\n            {\r\n                Console.Clear();\r\n\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 Cine GBA\u0022);\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n                Console.WriteLine(\u0022 -----------------\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n                Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n                Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n                Console.WriteLine(\u0022 4. Salir \u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022******************************\u0022);\r\n                Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n                char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n                Console.WriteLine();\r\n\r\n                switch (option)\r\n                {\r\n\r\n                    case \u00271\u0027:\r\n\r\n                        var nuevaFuncion = new Funcion();\r\n\r\n                        Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\r\n                        DateTime fecha;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out fecha))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Fecha = fecha;\r\n\r\n                        Console.Write(\u0022Horario (HH:mm:ss): \u0022);\r\n                        DateTime horario;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out horario))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Horario no v\u00E1lido. Ingrese un horario en el formato HH:mm:ss.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Horario = horario;\r\n\r\n                        // Listar peliculas disponibles\r\n                        var todaslaspeliculas = peliculasService.GetAllPeliculas();\r\n                        Console.WriteLine(\u0022Peliculas disponibles:\u0022);\r\n                        foreach (var pelicula in todaslaspeliculas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                        }\r\n\r\n                        int peliculaId;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                Console.Write(\u0022Seleccione la pel\u00EDcula (ID): \u0022);\r\n                                if (int.TryParse(Console.ReadLine(), out peliculaId))\r\n                                {\r\n                                    if (todaslaspeliculas.Any(p =\u003E p.PeliculaId == peliculaId))\r\n                                        break;\r\n                                    else\r\n                                        throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                                else\r\n                                {\r\n                                    throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                                }\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.PeliculaId = peliculaId;\r\n\r\n                        // salas disponibles\r\n                        List\u003CSala\u003E salas = salasService.GetAllSalas();\r\n                        Console.WriteLine(\u0022Salas disponibles:\u0022);\r\n                        foreach (var sala in salas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {sala.SalaId}, Nombre: {sala.Nombre}\u0022);\r\n                        }\r\n\r\n                        int salaId;\r\n                        while (true)\r\n                        {\r\n                            Console.Write(\u0022Seleccione la sala (ID): \u0022);\r\n                            if (int.TryParse(Console.ReadLine(), out salaId))\r\n                            {\r\n                                if (salas.Any(s =\u003E s.SalaId == salaId))\r\n                                {\r\n                                    break;\r\n                                }\r\n                                else\r\n                                {\r\n                                    Console.WriteLine(\u0022ID de sala no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022ID de sala no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.SalaId = salaId;\r\n\r\n                        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n                        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                        \r\n                        string peliculaTitulo = peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        string salaNombre = salasService.GetSalaNombreById(nuevaFuncion.SalaId);\r\n                        \r\n                        string generoNombre = generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n                        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n                        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n\r\n                        funcionesServices.CreateFuncion(nuevaFuncion);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n                        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                        Console.ReadKey();\r\n\r\n\r\n\r\n\r\n                        break;\r\n\r\n                    case \u00272\u0027:\r\n\r\n                        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n                        // Traer todas las pel\u00EDculas disponibles\r\n                        var peliculas = peliculasService.GetAllPeliculas();\r\n\r\n                        if (peliculas.Any())\r\n                        {\r\n                            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n                            foreach (var pelicula in peliculas)\r\n                            {\r\n                                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                            }\r\n\r\n                            int seleccion;\r\n                            while (true)\r\n                            {\r\n                                try\r\n                                {\r\n                                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                                    {\r\n                                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                                        {\r\n                                            break;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Console.WriteLine(\u0022ID invalido\u0022);\r\n                                    }\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Console.WriteLine(ex.Message);\r\n                                }\r\n                            }\r\n\r\n                            //  Mostrar las funciones para la pel\u00EDcula seleccionada\r\n                            var funcionesPorPelicula = funcionesServices.GetFuncionesPorPelicula(seleccion);\r\n\r\n                            if (funcionesPorPelicula.Any())\r\n                            {\r\n\r\n                                Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {seleccion}):\u0022);\r\n\r\n                                foreach (var funcion in funcionesPorPelicula)\r\n                                {\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\r\n                                    Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\r\n                                    Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n\r\n                        break;\r\n\r\n\r\n                    case \u00273\u0027:\r\n                        // Listar funciones por d\u00EDa y/o t\u00EDtulo de pel\u00EDcula\r\n                        Console.WriteLine(\u0022Bienvenido al buscador de funciones\u0022);\r\n                        Console.Write(\u0022Ingrese la fecha (YYYY-MM-DD): \u0022);\r\n                        string fechaStr = Console.ReadLine();\r\n                        DateTime? fechaFiltro = null;\r\n\r\n                        if (!string.IsNullOrEmpty(fechaStr) \u0026\u0026 DateTime.TryParse(fechaStr, out DateTime fechaSeleccionada))\r\n                        {\r\n                            fechaFiltro = fechaSeleccionada;\r\n                        }\r\n\r\n                        if (fechaFiltro.HasValue)\r\n                        {\r\n                            var funcionesFiltradas = funcionesServices.GetFuncionesPorFecha(fechaFiltro.Value);\r\n\r\n                            if (funcionesFiltradas.Any())\r\n                            {\r\n                                foreach (var funcion in funcionesFiltradas)\r\n                                {\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022Fecha no v\u00E1lida.\u0022);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \u00274\u0027:\r\n                        return;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","Selections":[{"Caret":15139,"Start":0,"End":15139}],"FilePath":"C:\\Users\\aacar\\source\\repos\\CineConsole\\CineConsole\\CineConsole\\Program.cs","Language":"C#"}],"PreSelectedSkill":null,"CorrelationId":{"Guid":"bd7e046f-c71b-4697-97d0-aac7fe7a6d3c"}}},"Response":{"Content":"The selected lines show several namespace and class imports used in the Cine GBA program. These lines provide access to various dependencies and services necessary for the program\u0027s execution, including \u0060Application.Service\u0060, \u0060Domain\u0060, \u0060Infrastructure\u0060, \u0060Infrastructure.Command\u0060, \u0060Infrastructure.Query\u0060, and \u0060Microsoft.EntityFrameworkCore\u0060.\n\n\u0060Application.Service\u0060 likely provides services and business logic for the application\u0027s functionality, while \u0060Domain\u0060 could include the application\u0027s object models or entities. \u0060Infrastructure\u0060 appears to handle the data access and data storage for the application, including commands and queries. \u0060Microsoft.EntityFrameworkCore\u0060 is a library used for working with Entity Framework in .NET applications.\n\nOverall, these imports are necessary for the proper functioning of the Cine GBA program and allow for access to important functionalities and dependencies.","Type":0,"Status":1,"FollowUpPrompts":["What is Entity Framework and how is it used in the Cine GBA program?","Can you give an example of how the \u0060Infrastructure\u0060 namespace is used in the program\u0027s code?"]},"SelectedFunctionName":"Explain","LoggedSkillInvocations":null}
{"version":1,"Request":{"Prompt":"separame el siguiente codigo, el cual se encuentra en una sola clase en 2 o mas clases:\r\n\r\nusing Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\n\r\n\r\n\r\n\r\npublic partial class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);\r\n        // Crear una instancia de FuncionesServices\r\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\r\n\r\n        var salasQuery = new SalasQuery(context);\r\n        // Crear una instancia de SalasService\r\n        var salasService = new SalasService( salasQuery);\r\n\r\n        var peliculasQuery = new PeliculaQuery(context);\r\n        // Crear una instancia de PeliculaService\r\n        var peliculasService = new PeliculasService( peliculasQuery);\r\n\r\n        var generoService = new GeneroService(generoQuery);\r\n\r\n\r\n        {\r\n            while (true)\r\n            {\r\n                Console.Clear();\r\n\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 Cine GBA\u0022);\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n                Console.WriteLine(\u0022 -----------------\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n                Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n                Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n                Console.WriteLine(\u0022 4. Salir \u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022******************************\u0022);\r\n                Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n                char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n                Console.WriteLine();\r\n\r\n                switch (option)\r\n                {\r\n\r\n                    case \u00271\u0027:\r\n\r\n                        var nuevaFuncion = new Funcion();\r\n\r\n                        Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\r\n                        DateTime fecha;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out fecha))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Fecha = fecha;\r\n\r\n                        Console.Write(\u0022Horario (HH:mm:ss): \u0022);\r\n                        DateTime horario;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out horario))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Horario no v\u00E1lido. Ingrese un horario en el formato HH:mm:ss.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Horario = horario;\r\n\r\n                        // Listar peliculas disponibles\r\n                        var todaslaspeliculas = peliculasService.GetAllPeliculas();\r\n                        Console.WriteLine(\u0022Peliculas disponibles:\u0022);\r\n                        foreach (var pelicula in todaslaspeliculas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                        }\r\n\r\n                        int peliculaId;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                Console.Write(\u0022Seleccione la pel\u00EDcula (ID): \u0022);\r\n                                if (int.TryParse(Console.ReadLine(), out peliculaId))\r\n                                {\r\n                                    if (todaslaspeliculas.Any(p =\u003E p.PeliculaId == peliculaId))\r\n                                        break;\r\n                                    else\r\n                                        throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                                else\r\n                                {\r\n                                    throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                                }\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.PeliculaId = peliculaId;\r\n\r\n                        // salas disponibles\r\n                        List\u003CSala\u003E salas = salasService.GetAllSalas();\r\n                        Console.WriteLine(\u0022Salas disponibles:\u0022);\r\n                        foreach (var sala in salas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {sala.SalaId}, Nombre: {sala.Nombre}\u0022);\r\n                        }\r\n\r\n                        int salaId;\r\n                        while (true)\r\n                        {\r\n                            Console.Write(\u0022Seleccione la sala (ID): \u0022);\r\n                            if (int.TryParse(Console.ReadLine(), out salaId))\r\n                            {\r\n                                if (salas.Any(s =\u003E s.SalaId == salaId))\r\n                                {\r\n                                    break;\r\n                                }\r\n                                else\r\n                                {\r\n                                    Console.WriteLine(\u0022ID de sala no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022ID de sala no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.SalaId = salaId;\r\n\r\n                        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n                        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                        \r\n                        string peliculaTitulo = peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        string salaNombre = salasService.GetSalaNombreById(nuevaFuncion.SalaId);\r\n                        \r\n                        string generoNombre = generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n                        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n                        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n\r\n                        funcionesServices.CreateFuncion(nuevaFuncion);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n                        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                        Console.ReadKey();\r\n\r\n\r\n\r\n\r\n                        break;\r\n\r\n                    case \u00272\u0027:\r\n\r\n                        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n                        // Traer todas las pel\u00EDculas disponibles\r\n                        var peliculas = peliculasService.GetAllPeliculas();\r\n\r\n                        if (peliculas.Any())\r\n                        {\r\n                            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n                            foreach (var pelicula in peliculas)\r\n                            {\r\n                                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                            }\r\n\r\n                            int seleccion;\r\n                            while (true)\r\n                            {\r\n                                try\r\n                                {\r\n                                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                                    {\r\n                                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                                        {\r\n                                            break;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Console.WriteLine(\u0022ID invalido\u0022);\r\n                                    }\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Console.WriteLine(ex.Message);\r\n                                }\r\n                            }\r\n\r\n                            //  Mostrar las funciones para la pel\u00EDcula seleccionada\r\n                            var funcionesPorPelicula = funcionesServices.GetFuncionesPorPelicula(seleccion);\r\n\r\n                            if (funcionesPorPelicula.Any())\r\n                            {\r\n\r\n                                Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {seleccion}):\u0022);\r\n\r\n                                foreach (var funcion in funcionesPorPelicula)\r\n                                {\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\r\n                                    Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\r\n                                    Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n\r\n                        break;\r\n\r\n\r\n                    case \u00273\u0027:\r\n                        // Listar funciones por d\u00EDa y/o t\u00EDtulo de pel\u00EDcula\r\n                        Console.WriteLine(\u0022Bienvenido al buscador de funciones\u0022);\r\n                        Console.Write(\u0022Ingrese la fecha (YYYY-MM-DD): \u0022);\r\n                        string fechaStr = Console.ReadLine();\r\n                        DateTime? fechaFiltro = null;\r\n\r\n                        if (!string.IsNullOrEmpty(fechaStr) \u0026\u0026 DateTime.TryParse(fechaStr, out DateTime fechaSeleccionada))\r\n                        {\r\n                            fechaFiltro = fechaSeleccionada;\r\n                        }\r\n\r\n                        if (fechaFiltro.HasValue)\r\n                        {\r\n                            var funcionesFiltradas = funcionesServices.GetFuncionesPorFecha(fechaFiltro.Value);\r\n\r\n                            if (funcionesFiltradas.Any())\r\n                            {\r\n                                foreach (var funcion in funcionesFiltradas)\r\n                                {\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022Fecha no v\u00E1lida.\u0022);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \u00274\u0027:\r\n                        return;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","Context":{"VisibleDocuments":[{"Content":"using Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\n\r\n\r\n\r\n\r\npublic partial class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);\r\n        // Crear una instancia de FuncionesServices\r\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\r\n\r\n        var salasQuery = new SalasQuery(context);\r\n        // Crear una instancia de SalasService\r\n        var salasService = new SalasService( salasQuery);\r\n\r\n        var peliculasQuery = new PeliculaQuery(context);\r\n        // Crear una instancia de PeliculaService\r\n        var peliculasService = new PeliculasService( peliculasQuery);\r\n\r\n        var generoService = new GeneroService(generoQuery);\r\n\r\n\r\n        {\r\n            while (true)\r\n            {\r\n                Console.Clear();\r\n\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 Cine GBA\u0022);\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n                Console.WriteLine(\u0022 -----------------\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n                Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n                Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n                Console.WriteLine(\u0022 4. Salir \u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022******************************\u0022);\r\n                Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n                char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n                Console.WriteLine();\r\n\r\n                switch (option)\r\n                {\r\n\r\n                    case \u00271\u0027:\r\n\r\n                        var nuevaFuncion = new Funcion();\r\n\r\n                        Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\r\n                        DateTime fecha;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out fecha))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Fecha = fecha;\r\n\r\n                        Console.Write(\u0022Horario (HH:mm:ss): \u0022);\r\n                        DateTime horario;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out horario))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Horario no v\u00E1lido. Ingrese un horario en el formato HH:mm:ss.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Horario = horario;\r\n\r\n                        // Listar peliculas disponibles\r\n                        var todaslaspeliculas = peliculasService.GetAllPeliculas();\r\n                        Console.WriteLine(\u0022Peliculas disponibles:\u0022);\r\n                        foreach (var pelicula in todaslaspeliculas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                        }\r\n\r\n                        int peliculaId;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                Console.Write(\u0022Seleccione la pel\u00EDcula (ID): \u0022);\r\n                                if (int.TryParse(Console.ReadLine(), out peliculaId))\r\n                                {\r\n                                    if (todaslaspeliculas.Any(p =\u003E p.PeliculaId == peliculaId))\r\n                                        break;\r\n                                    else\r\n                                        throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                                else\r\n                                {\r\n                                    throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                                }\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.PeliculaId = peliculaId;\r\n\r\n                        // salas disponibles\r\n                        List\u003CSala\u003E salas = salasService.GetAllSalas();\r\n                        Console.WriteLine(\u0022Salas disponibles:\u0022);\r\n                        foreach (var sala in salas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {sala.SalaId}, Nombre: {sala.Nombre}\u0022);\r\n                        }\r\n\r\n                        int salaId;\r\n                        while (true)\r\n                        {\r\n                            Console.Write(\u0022Seleccione la sala (ID): \u0022);\r\n                            if (int.TryParse(Console.ReadLine(), out salaId))\r\n                            {\r\n                                if (salas.Any(s =\u003E s.SalaId == salaId))\r\n                                {\r\n                                    break;\r\n                                }\r\n                                else\r\n                                {\r\n                                    Console.WriteLine(\u0022ID de sala no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022ID de sala no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.SalaId = salaId;\r\n\r\n                        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n                        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                        \r\n                        string peliculaTitulo = peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        string salaNombre = salasService.GetSalaNombreById(nuevaFuncion.SalaId);\r\n                        \r\n                        string generoNombre = generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n                        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n                        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n\r\n                        funcionesServices.CreateFuncion(nuevaFuncion);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n                        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                        Console.ReadKey();\r\n\r\n\r\n\r\n\r\n                        break;\r\n\r\n                    case \u00272\u0027:\r\n\r\n                        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n                        // Traer todas las pel\u00EDculas disponibles\r\n                        var peliculas = peliculasService.GetAllPeliculas();\r\n\r\n                        if (peliculas.Any())\r\n                        {\r\n                            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n                            foreach (var pelicula in peliculas)\r\n                            {\r\n                                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                            }\r\n\r\n                            int seleccion;\r\n                            while (true)\r\n                            {\r\n                                try\r\n                                {\r\n                                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                                    {\r\n                                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                                        {\r\n                                            break;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Console.WriteLine(\u0022ID invalido\u0022);\r\n                                    }\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Console.WriteLine(ex.Message);\r\n                                }\r\n                            }\r\n\r\n                            //  Mostrar las funciones para la pel\u00EDcula seleccionada\r\n                            var funcionesPorPelicula = funcionesServices.GetFuncionesPorPelicula(seleccion);\r\n\r\n                            if (funcionesPorPelicula.Any())\r\n                            {\r\n\r\n                                Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {seleccion}):\u0022);\r\n\r\n                                foreach (var funcion in funcionesPorPelicula)\r\n                                {\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\r\n                                    Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\r\n                                    Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n\r\n                        break;\r\n\r\n\r\n                    case \u00273\u0027:\r\n                        // Listar funciones por d\u00EDa y/o t\u00EDtulo de pel\u00EDcula\r\n                        Console.WriteLine(\u0022Bienvenido al buscador de funciones\u0022);\r\n                        Console.Write(\u0022Ingrese la fecha (YYYY-MM-DD): \u0022);\r\n                        string fechaStr = Console.ReadLine();\r\n                        DateTime? fechaFiltro = null;\r\n\r\n                        if (!string.IsNullOrEmpty(fechaStr) \u0026\u0026 DateTime.TryParse(fechaStr, out DateTime fechaSeleccionada))\r\n                        {\r\n                            fechaFiltro = fechaSeleccionada;\r\n                        }\r\n\r\n                        if (fechaFiltro.HasValue)\r\n                        {\r\n                            var funcionesFiltradas = funcionesServices.GetFuncionesPorFecha(fechaFiltro.Value);\r\n\r\n                            if (funcionesFiltradas.Any())\r\n                            {\r\n                                foreach (var funcion in funcionesFiltradas)\r\n                                {\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022Fecha no v\u00E1lida.\u0022);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \u00274\u0027:\r\n                        return;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","Selections":[{"Caret":15139,"Start":0,"End":15139}],"FilePath":"C:\\Users\\aacar\\source\\repos\\CineConsole\\CineConsole\\CineConsole\\Program.cs","Language":"C#"}],"PreSelectedSkill":null,"CorrelationId":{"Guid":"3ac65992-6c9a-4f75-bd46-60eef5743847"}}},"Response":{"Content":"The requested code involves several objects of different types and a switch statement that creates a menu and prompts users for input. Without more context, it is not clear where to separate the code into multiple classes.\n\nAdditionally, it is important to note that separating code into multiple classes should only be done if it makes the code more maintainable or introduces other significant benefits. It should not be done simply for the sake of having multiple classes.\n\nIf you can provide more context or explain your goals for separating the code, I can provide more specific guidance.","Type":0,"Status":1,"FollowUpPrompts":["Can you explain the benefits of separating code into multiple classes?","Is there any particular part of the code that you think would benefit from separation?"]},"SelectedFunctionName":"Explain","LoggedSkillInvocations":null}
{"version":1,"Request":{"Prompt":"necestio modularizar el codigo para que se mas mantenible","Context":{"VisibleDocuments":[{"Content":"using Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\n\r\n\r\n\r\n\r\npublic partial class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);\r\n        // Crear una instancia de FuncionesServices\r\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\r\n\r\n        var salasQuery = new SalasQuery(context);\r\n        // Crear una instancia de SalasService\r\n        var salasService = new SalasService( salasQuery);\r\n\r\n        var peliculasQuery = new PeliculaQuery(context);\r\n        // Crear una instancia de PeliculaService\r\n        var peliculasService = new PeliculasService( peliculasQuery);\r\n\r\n        var generoService = new GeneroService(generoQuery);\r\n\r\n\r\n        {\r\n            while (true)\r\n            {\r\n                Console.Clear();\r\n\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 Cine GBA\u0022);\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n                Console.WriteLine(\u0022 -----------------\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n                Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n                Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n                Console.WriteLine(\u0022 4. Salir \u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022******************************\u0022);\r\n                Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n                char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n                Console.WriteLine();\r\n\r\n                switch (option)\r\n                {\r\n\r\n                    case \u00271\u0027:\r\n\r\n                        var nuevaFuncion = new Funcion();\r\n\r\n                        Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\r\n                        DateTime fecha;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out fecha))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Fecha = fecha;\r\n\r\n                        Console.Write(\u0022Horario (HH:mm:ss): \u0022);\r\n                        DateTime horario;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out horario))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Horario no v\u00E1lido. Ingrese un horario en el formato HH:mm:ss.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Horario = horario;\r\n\r\n                        // Listar peliculas disponibles\r\n                        var todaslaspeliculas = peliculasService.GetAllPeliculas();\r\n                        Console.WriteLine(\u0022Peliculas disponibles:\u0022);\r\n                        foreach (var pelicula in todaslaspeliculas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                        }\r\n\r\n                        int peliculaId;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                Console.Write(\u0022Seleccione la pel\u00EDcula (ID): \u0022);\r\n                                if (int.TryParse(Console.ReadLine(), out peliculaId))\r\n                                {\r\n                                    if (todaslaspeliculas.Any(p =\u003E p.PeliculaId == peliculaId))\r\n                                        break;\r\n                                    else\r\n                                        throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                                else\r\n                                {\r\n                                    throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                                }\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.PeliculaId = peliculaId;\r\n\r\n                        // salas disponibles\r\n                        List\u003CSala\u003E salas = salasService.GetAllSalas();\r\n                        Console.WriteLine(\u0022Salas disponibles:\u0022);\r\n                        foreach (var sala in salas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {sala.SalaId}, Nombre: {sala.Nombre}\u0022);\r\n                        }\r\n\r\n                        int salaId;\r\n                        while (true)\r\n                        {\r\n                            Console.Write(\u0022Seleccione la sala (ID): \u0022);\r\n                            if (int.TryParse(Console.ReadLine(), out salaId))\r\n                            {\r\n                                if (salas.Any(s =\u003E s.SalaId == salaId))\r\n                                {\r\n                                    break;\r\n                                }\r\n                                else\r\n                                {\r\n                                    Console.WriteLine(\u0022ID de sala no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022ID de sala no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.SalaId = salaId;\r\n\r\n                        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n                        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                        \r\n                        string peliculaTitulo = peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        string salaNombre = salasService.GetSalaNombreById(nuevaFuncion.SalaId);\r\n                        \r\n                        string generoNombre = generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n                        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n                        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n\r\n                        funcionesServices.CreateFuncion(nuevaFuncion);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n                        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                        Console.ReadKey();\r\n\r\n\r\n\r\n\r\n                        break;\r\n\r\n                    case \u00272\u0027:\r\n\r\n                        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n                        // Traer todas las pel\u00EDculas disponibles\r\n                        var peliculas = peliculasService.GetAllPeliculas();\r\n\r\n                        if (peliculas.Any())\r\n                        {\r\n                            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n                            foreach (var pelicula in peliculas)\r\n                            {\r\n                                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                            }\r\n\r\n                            int seleccion;\r\n                            while (true)\r\n                            {\r\n                                try\r\n                                {\r\n                                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                                    {\r\n                                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                                        {\r\n                                            break;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Console.WriteLine(\u0022ID invalido\u0022);\r\n                                    }\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Console.WriteLine(ex.Message);\r\n                                }\r\n                            }\r\n\r\n                            //  Mostrar las funciones para la pel\u00EDcula seleccionada\r\n                            var funcionesPorPelicula = funcionesServices.GetFuncionesPorPelicula(seleccion);\r\n\r\n                            if (funcionesPorPelicula.Any())\r\n                            {\r\n\r\n                                Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {seleccion}):\u0022);\r\n\r\n                                foreach (var funcion in funcionesPorPelicula)\r\n                                {\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\r\n                                    Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\r\n                                    Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n\r\n                        break;\r\n\r\n\r\n                    case \u00273\u0027:\r\n                        // Listar funciones por d\u00EDa y/o t\u00EDtulo de pel\u00EDcula\r\n                        Console.WriteLine(\u0022Bienvenido al buscador de funciones\u0022);\r\n                        Console.Write(\u0022Ingrese la fecha (YYYY-MM-DD): \u0022);\r\n                        string fechaStr = Console.ReadLine();\r\n                        DateTime? fechaFiltro = null;\r\n\r\n                        if (!string.IsNullOrEmpty(fechaStr) \u0026\u0026 DateTime.TryParse(fechaStr, out DateTime fechaSeleccionada))\r\n                        {\r\n                            fechaFiltro = fechaSeleccionada;\r\n                        }\r\n\r\n                        if (fechaFiltro.HasValue)\r\n                        {\r\n                            var funcionesFiltradas = funcionesServices.GetFuncionesPorFecha(fechaFiltro.Value);\r\n\r\n                            if (funcionesFiltradas.Any())\r\n                            {\r\n                                foreach (var funcion in funcionesFiltradas)\r\n                                {\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022Fecha no v\u00E1lida.\u0022);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \u00274\u0027:\r\n                        return;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","Selections":[{"Caret":205,"Start":174,"End":15139}],"FilePath":"C:\\Users\\aacar\\source\\repos\\CineConsole\\CineConsole\\CineConsole\\Program.cs","Language":"C#"}],"PreSelectedSkill":null,"CorrelationId":{"Guid":"5e4c879c-7778-4013-b6ad-dce471ed7fee"}}},"Response":{"Content":"\u0060\u0060\u0060C#\r\nusing Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\npublic class CineGbaMenu\r\n{\r\n    public static void ShowMenu()\r\n    {\r\n        Console.Clear();\r\n\r\n        Console.WriteLine(\u0022************\u0022);\r\n        Console.WriteLine(\u0022 Cine GBA\u0022);\r\n        Console.WriteLine(\u0022************\u0022);\r\n        Console.WriteLine(\u0022 \u0022);\r\n        Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n        Console.WriteLine(\u0022 -----------------\u0022);\r\n        Console.WriteLine(\u0022 \u0022);\r\n        Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n        Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n        Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n        Console.WriteLine(\u0022 4. Salir \u0022);\r\n        Console.WriteLine(\u0022 \u0022);\r\n        Console.WriteLine(\u0022******************************\u0022);\r\n        Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n        char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n        Console.WriteLine();\r\n\r\n        switch (option)\r\n        {\r\n\r\n            case \u00271\u0027:\r\n                AddFuncion();\r\n                break;\r\n\r\n            case \u00272\u0027:\r\n                SearchFuncionByPelicula();\r\n                break;\r\n\r\n            case \u00273\u0027:\r\n                SearchFuncionByDia();\r\n                break;\r\n\r\n            case \u00274\u0027:\r\n                Environment.Exit(0);\r\n                break;\r\n\r\n            default:\r\n                Console.WriteLine(\u0022Opci\u00F3n no v\u00E1lida. Seleccione una opci\u00F3n v\u00E1lida.\u0022);\r\n                Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                Console.ReadKey();\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static void AddFuncion()\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);       \r\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\r\n\r\n        var salasQuery = new SalasQuery(context);       \r\n        var salasService = new SalasService( salasQuery);\r\n\r\n        var peliculasQuery = new PeliculaQuery(context);        \r\n        var peliculasService = new PeliculasService( peliculasQuery);\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var generoService = new GeneroService(generoQuery);\r\n\r\n        var nuevaFuncion = new Funcion();\r\n\r\n        Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\r\n        DateTime fecha;\r\n        while (true)\r\n        {\r\n            try\r\n            {\r\n                if (DateTime.TryParse(Console.ReadLine(), out fecha))\r\n                    break;\r\n                else\r\n                    throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(ex.Message);\r\n            }\r\n        }\r\n        nuevaFuncion.Fecha = fecha;\r\n\r\n        Console.Write(\u0022Horario (HH:mm:ss): \u0022);\r\n        DateTime horario;\r\n        while (true)\r\n        {\r\n            try\r\n            {\r\n                if (DateTime.TryParse(Console.ReadLine(), out horario))\r\n                    break;\r\n                else\r\n                    throw new Exception(\u0022Horario no v\u00E1lido. Ingrese un horario en el formato HH:mm:ss.\u0022);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(ex.Message);\r\n            }\r\n        }\r\n        nuevaFuncion.Horario = horario;\r\n\r\n        // Listar peliculas disponibles\r\n        var todaslaspeliculas = peliculasService.GetAllPeliculas();\r\n        Console.WriteLine(\u0022Peliculas disponibles:\u0022);\r\n        foreach (var pelicula in todaslaspeliculas)\r\n        {\r\n            Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n        }\r\n\r\n        int peliculaId;\r\n        while (true)\r\n        {\r\n            try\r\n            {\r\n                Console.Write(\u0022Seleccione la pel\u00EDcula (ID): \u0022);\r\n                if (int.TryParse(Console.ReadLine(), out peliculaId))\r\n                {\r\n                    if (todaslaspeliculas.Any(p =\u003E p.PeliculaId == peliculaId))\r\n                        break;\r\n                    else\r\n                        throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                }\r\n                else\r\n                {\r\n                    throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(ex.Message);\r\n            }\r\n        }\r\n        nuevaFuncion.PeliculaId = peliculaId;\r\n\r\n        var salas = salasService.GetAllSalas();\r\n        Console.WriteLine(\u0022Salas disponibles:\u0022);\r\n        foreach (var sala in salas)\r\n        {\r\n            Console.WriteLine($\u0022ID: {sala.SalaId}, Nombre: {sala.Nombre}\u0022);\r\n        }\r\n\r\n        int salaId;\r\n        while (true)\r\n        {\r\n            Console.Write(\u0022Seleccione la sala (ID): \u0022);\r\n            if (int.TryParse(Console.ReadLine(), out salaId))\r\n            {\r\n                if (salas.Any(s =\u003E s.SalaId == salaId))\r\n                {\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine(\u0022ID de sala no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                Console.WriteLine(\u0022ID de sala no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n            }\r\n        }\r\n        nuevaFuncion.SalaId = salaId;\r\n\r\n        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n        Console.WriteLine();\r\n        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                        \r\n        string peliculaTitulo = peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);                        \r\n        string salaNombre = salasService.GetSalaNombreById(nuevaFuncion.SalaId);                        \r\n        string generoNombre = generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);                        \r\n        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n        \r\n        funcionesServices.CreateFuncion(nuevaFuncion);\r\n        Console.WriteLine(\u0022 \u0022);\r\n        Console.WriteLine(\u0022 \u0022);\r\n        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n        Console.ReadKey();\r\n    }\r\n\r\n    public static void SearchFuncionByPelicula()\r\n    {\r\n        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n        var context = new CineDdContext();\r\n\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesService = new FuncionService(funcionesQuery);\r\n   \r\n        var peliculasService = new PeliculasService( new PeliculaQuery(context));\r\n\r\n        var peliculas = peliculasService.GetAllPeliculas();\r\n\r\n        if (peliculas.Any())\r\n        {\r\n            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n            foreach (var pelicula in peliculas)\r\n            {\r\n                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n            }\r\n\r\n            int seleccion;\r\n            while (true)\r\n            {\r\n                try\r\n                {\r\n                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                    {\r\n                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                        {\r\n                            break;\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        Console.WriteLine(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                    }\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    Console.WriteLine(ex.Message);\r\n                }\r\n            }\r\n            var funciones = funcionesService.GetFuncionesByPeliculaId(seleccion);\r\n\r\n            if(funciones.Any())\r\n            {\r\n                Console.WriteLine(\u0022Funciones:\u0022);\r\n\r\n                foreach (var funcion in funciones)\r\n                {\r\n                    Console.WriteLine($\u0022- Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}, Sala: {funcion.Sala.Nombre} \u0022);\r\n                }\r\n            }else{\r\n                Console.WriteLine(\u0022No se encuentran funciones para la pel\u00EDcula seleccionada.\u0022);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine(\u0022No existen pel\u00EDculas.\u0022);\r\n        }\r\n        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n        Console.ReadKey();\r\n\r\n    }\r\n\r\n    public static void SearchFuncionByDia(){\r\n        //TODO implement search por dia\r\n    }\r\n}\r\n\u0060\u0060\u0060","Type":1,"Status":1,"FollowUpPrompts":null},"SelectedFunctionName":"Modify","LoggedSkillInvocations":null}
{"version":1,"Request":{"Prompt":"modularizar el siguiente codigo paara que sea mas mantenible:\r\n\r\nusing Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\n\r\n\r\n\r\n\r\n\r\n\r\npublic  class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);\r\n        // Crear una instancia de FuncionesServices\r\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\r\n\r\n        var salasQuery = new SalasQuery(context);\r\n        // Crear una instancia de SalasService\r\n        var salasService = new SalasService( salasQuery);\r\n\r\n        var peliculasQuery = new PeliculaQuery(context);\r\n        // Crear una instancia de PeliculaService\r\n        var peliculasService = new PeliculasService( peliculasQuery);\r\n\r\n        var generoService = new GeneroService(generoQuery);\r\n\r\n\r\n        {\r\n            while (true)\r\n            {\r\n                Console.Clear();\r\n\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 Cine GBA\u0022);\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n                Console.WriteLine(\u0022 -----------------\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n                Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n                Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n                Console.WriteLine(\u0022 4. Salir \u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022******************************\u0022);\r\n                Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n                char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n                Console.WriteLine();\r\n\r\n                switch (option)\r\n                {\r\n\r\n                    case \u00271\u0027:\r\n\r\n                        var nuevaFuncion = new Funcion();\r\n\r\n                        Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\r\n                        DateTime fecha;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out fecha))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Fecha = fecha;\r\n\r\n                        Console.Write(\u0022Horario (HH:mm:ss): \u0022);\r\n                        DateTime horario;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out horario))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Horario no v\u00E1lido. Ingrese un horario en el formato HH:mm:ss.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Horario = horario;\r\n\r\n                        // Listar peliculas disponibles\r\n                        var todaslaspeliculas = peliculasService.GetAllPeliculas();\r\n                        Console.WriteLine(\u0022Peliculas disponibles:\u0022);\r\n                        foreach (var pelicula in todaslaspeliculas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                        }\r\n\r\n                        int peliculaId;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                Console.Write(\u0022Seleccione la pel\u00EDcula (ID): \u0022);\r\n                                if (int.TryParse(Console.ReadLine(), out peliculaId))\r\n                                {\r\n                                    if (todaslaspeliculas.Any(p =\u003E p.PeliculaId == peliculaId))\r\n                                        break;\r\n                                    else\r\n                                        throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                                else\r\n                                {\r\n                                    throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                                }\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.PeliculaId = peliculaId;\r\n\r\n                        // salas disponibles\r\n                        List\u003CSala\u003E salas = salasService.GetAllSalas();\r\n                        Console.WriteLine(\u0022Salas disponibles:\u0022);\r\n                        foreach (var sala in salas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {sala.SalaId}, Nombre: {sala.Nombre}\u0022);\r\n                        }\r\n\r\n                        int salaId;\r\n                        while (true)\r\n                        {\r\n                            Console.Write(\u0022Seleccione la sala (ID): \u0022);\r\n                            if (int.TryParse(Console.ReadLine(), out salaId))\r\n                            {\r\n                                if (salas.Any(s =\u003E s.SalaId == salaId))\r\n                                {\r\n                                    break;\r\n                                }\r\n                                else\r\n                                {\r\n                                    Console.WriteLine(\u0022ID de sala no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022ID de sala no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.SalaId = salaId;\r\n\r\n                        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n                        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                        \r\n                        string peliculaTitulo = peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        string salaNombre = salasService.GetSalaNombreById(nuevaFuncion.SalaId);\r\n                        \r\n                        string generoNombre = generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n                        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n                        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n\r\n                        funcionesServices.CreateFuncion(nuevaFuncion);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n                        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                        Console.ReadKey();\r\n\r\n\r\n\r\n\r\n                        break;\r\n\r\n                    case \u00272\u0027:\r\n\r\n                        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n                        // Traer todas las pel\u00EDculas disponibles\r\n                        var peliculas = peliculasService.GetAllPeliculas();\r\n\r\n                        if (peliculas.Any())\r\n                        {\r\n                            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n                            foreach (var pelicula in peliculas)\r\n                            {\r\n                                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                            }\r\n\r\n                            int seleccion;\r\n                            while (true)\r\n                            {\r\n                                try\r\n                                {\r\n                                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                                    {\r\n                                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                                        {\r\n                                            break;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Console.WriteLine(\u0022ID invalido\u0022);\r\n                                    }\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Console.WriteLine(ex.Message);\r\n                                }\r\n                            }\r\n\r\n                            //  Mostrar las funciones para la pel\u00EDcula seleccionada\r\n                            var funcionesPorPelicula = funcionesServices.GetFuncionesPorPelicula(seleccion);\r\n\r\n                            if (funcionesPorPelicula.Any())\r\n                            {\r\n\r\n                                Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {seleccion}):\u0022);\r\n\r\n                                foreach (var funcion in funcionesPorPelicula)\r\n                                {\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\r\n                                    Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\r\n                                    Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n\r\n                        break;\r\n\r\n\r\n                    case \u00273\u0027:\r\n                        // Listar funciones por d\u00EDa y/o t\u00EDtulo de pel\u00EDcula\r\n                        Console.WriteLine(\u0022Bienvenido al buscador de funciones\u0022);\r\n                        Console.Write(\u0022Ingrese la fecha (YYYY-MM-DD): \u0022);\r\n                        string fechaStr = Console.ReadLine();\r\n                        DateTime? fechaFiltro = null;\r\n\r\n                        if (!string.IsNullOrEmpty(fechaStr) \u0026\u0026 DateTime.TryParse(fechaStr, out DateTime fechaSeleccionada))\r\n                        {\r\n                            fechaFiltro = fechaSeleccionada;\r\n                        }\r\n\r\n                        if (fechaFiltro.HasValue)\r\n                        {\r\n                            var funcionesFiltradas = funcionesServices.GetFuncionesPorFecha(fechaFiltro.Value);\r\n\r\n                            if (funcionesFiltradas.Any())\r\n                            {\r\n                                foreach (var funcion in funcionesFiltradas)\r\n                                {\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022Fecha no v\u00E1lida.\u0022);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \u00274\u0027:\r\n                        return;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","Context":{"VisibleDocuments":[{"Content":"using Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\n\r\n\r\n\r\n\r\n\r\n\r\npublic  class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);\r\n        // Crear una instancia de FuncionesServices\r\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\r\n\r\n        var salasQuery = new SalasQuery(context);\r\n        // Crear una instancia de SalasService\r\n        var salasService = new SalasService( salasQuery);\r\n\r\n        var peliculasQuery = new PeliculaQuery(context);\r\n        // Crear una instancia de PeliculaService\r\n        var peliculasService = new PeliculasService( peliculasQuery);\r\n\r\n        var generoService = new GeneroService(generoQuery);\r\n\r\n\r\n        {\r\n            while (true)\r\n            {\r\n                Console.Clear();\r\n\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 Cine GBA\u0022);\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n                Console.WriteLine(\u0022 -----------------\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n                Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n                Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n                Console.WriteLine(\u0022 4. Salir \u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022******************************\u0022);\r\n                Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n                char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n                Console.WriteLine();\r\n\r\n                switch (option)\r\n                {\r\n\r\n                    case \u00271\u0027:\r\n\r\n                        var nuevaFuncion = new Funcion();\r\n\r\n                        Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\r\n                        DateTime fecha;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out fecha))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Fecha = fecha;\r\n\r\n                        Console.Write(\u0022Horario (HH:mm:ss): \u0022);\r\n                        DateTime horario;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out horario))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Horario no v\u00E1lido. Ingrese un horario en el formato HH:mm:ss.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Horario = horario;\r\n\r\n                        // Listar peliculas disponibles\r\n                        var todaslaspeliculas = peliculasService.GetAllPeliculas();\r\n                        Console.WriteLine(\u0022Peliculas disponibles:\u0022);\r\n                        foreach (var pelicula in todaslaspeliculas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                        }\r\n\r\n                        int peliculaId;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                Console.Write(\u0022Seleccione la pel\u00EDcula (ID): \u0022);\r\n                                if (int.TryParse(Console.ReadLine(), out peliculaId))\r\n                                {\r\n                                    if (todaslaspeliculas.Any(p =\u003E p.PeliculaId == peliculaId))\r\n                                        break;\r\n                                    else\r\n                                        throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                                else\r\n                                {\r\n                                    throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                                }\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.PeliculaId = peliculaId;\r\n\r\n                        // salas disponibles\r\n                        List\u003CSala\u003E salas = salasService.GetAllSalas();\r\n                        Console.WriteLine(\u0022Salas disponibles:\u0022);\r\n                        foreach (var sala in salas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {sala.SalaId}, Nombre: {sala.Nombre}\u0022);\r\n                        }\r\n\r\n                        int salaId;\r\n                        while (true)\r\n                        {\r\n                            Console.Write(\u0022Seleccione la sala (ID): \u0022);\r\n                            if (int.TryParse(Console.ReadLine(), out salaId))\r\n                            {\r\n                                if (salas.Any(s =\u003E s.SalaId == salaId))\r\n                                {\r\n                                    break;\r\n                                }\r\n                                else\r\n                                {\r\n                                    Console.WriteLine(\u0022ID de sala no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022ID de sala no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.SalaId = salaId;\r\n\r\n                        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n                        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                        \r\n                        string peliculaTitulo = peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        string salaNombre = salasService.GetSalaNombreById(nuevaFuncion.SalaId);\r\n                        \r\n                        string generoNombre = generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n                        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n                        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n\r\n                        funcionesServices.CreateFuncion(nuevaFuncion);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n                        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                        Console.ReadKey();\r\n\r\n\r\n\r\n\r\n                        break;\r\n\r\n                    case \u00272\u0027:\r\n\r\n                        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n                        // Traer todas las pel\u00EDculas disponibles\r\n                        var peliculas = peliculasService.GetAllPeliculas();\r\n\r\n                        if (peliculas.Any())\r\n                        {\r\n                            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n                            foreach (var pelicula in peliculas)\r\n                            {\r\n                                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                            }\r\n\r\n                            int seleccion;\r\n                            while (true)\r\n                            {\r\n                                try\r\n                                {\r\n                                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                                    {\r\n                                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                                        {\r\n                                            break;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Console.WriteLine(\u0022ID invalido\u0022);\r\n                                    }\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Console.WriteLine(ex.Message);\r\n                                }\r\n                            }\r\n\r\n                            //  Mostrar las funciones para la pel\u00EDcula seleccionada\r\n                            var funcionesPorPelicula = funcionesServices.GetFuncionesPorPelicula(seleccion);\r\n\r\n                            if (funcionesPorPelicula.Any())\r\n                            {\r\n\r\n                                Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {seleccion}):\u0022);\r\n\r\n                                foreach (var funcion in funcionesPorPelicula)\r\n                                {\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\r\n                                    Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\r\n                                    Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n\r\n                        break;\r\n\r\n\r\n                    case \u00273\u0027:\r\n                        // Listar funciones por d\u00EDa y/o t\u00EDtulo de pel\u00EDcula\r\n                        Console.WriteLine(\u0022Bienvenido al buscador de funciones\u0022);\r\n                        Console.Write(\u0022Ingrese la fecha (YYYY-MM-DD): \u0022);\r\n                        string fechaStr = Console.ReadLine();\r\n                        DateTime? fechaFiltro = null;\r\n\r\n                        if (!string.IsNullOrEmpty(fechaStr) \u0026\u0026 DateTime.TryParse(fechaStr, out DateTime fechaSeleccionada))\r\n                        {\r\n                            fechaFiltro = fechaSeleccionada;\r\n                        }\r\n\r\n                        if (fechaFiltro.HasValue)\r\n                        {\r\n                            var funcionesFiltradas = funcionesServices.GetFuncionesPorFecha(fechaFiltro.Value);\r\n\r\n                            if (funcionesFiltradas.Any())\r\n                            {\r\n                                foreach (var funcion in funcionesFiltradas)\r\n                                {\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022Fecha no v\u00E1lida.\u0022);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \u00274\u0027:\r\n                        return;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","Selections":[{"Caret":15096,"Start":0,"End":15096}],"FilePath":"C:\\Users\\aacar\\source\\repos\\CineConsole\\CineConsole\\CineConsole\\Program.cs","Language":"C#"}],"PreSelectedSkill":null,"CorrelationId":{"Guid":"b1938389-3cbe-42f2-b6be-116c24733493"}}},"Response":{"Content":"using Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\n\r\n\r\n\r\n\r\npublic class CineManager {\r\n\r\n    private FuncionService _funcionesServices;\r\n    private SalasService _salasService;\r\n    private PeliculasService _peliculasService;\r\n    private GeneroService _generoService;\r\n\r\n    public CineManager(FuncionService funcSvc, SalasService salasSvc, PeliculasService peliculasSvc,GeneroService generoSvc){\r\n        _funcionesServices = funcSvc;\r\n        _salasService = salasSvc;\r\n        _peliculasService = peliculasSvc;\r\n        _generoService = generoSvc;\r\n    }\r\n\r\n    public void NuevaFuncion(Funcion nuevaFuncion)\r\n    {\r\n\r\n        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n        Console.WriteLine();\r\n        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n\r\n        string peliculaTitulo = _peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);\r\n\r\n        string salaNombre = _salasService.GetSalaNombreById(nuevaFuncion.SalaId);\r\n\r\n        string generoNombre = _generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);\r\n\r\n        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n\r\n        _funcionesServices.CreateFuncion(nuevaFuncion);\r\n        Console.WriteLine(\u0022 \u0022);\r\n        Console.WriteLine(\u0022 \u0022);\r\n        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n    }\r\n\r\n    public void BuscarPorPelicula(){\r\n        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n        // Traer todas las pel\u00EDculas disponibles\r\n        var peliculas = _peliculasService.GetAllPeliculas();\r\n\r\n        if (peliculas.Any())\r\n        {\r\n            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n            foreach (var pelicula in peliculas)\r\n            {\r\n                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n            }\r\n\r\n            int seleccion;\r\n            while (true)\r\n            {\r\n                try\r\n                {\r\n                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                    {\r\n                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                        {\r\n                            break;\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        Console.WriteLine(\u0022ID invalido\u0022);\r\n                    }\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    Console.WriteLine(ex.Message);\r\n                }\r\n            }\r\n\r\n            //  Mostrar las funciones para la pel\u00EDcula seleccionada\r\n            var funcionesPorPelicula = _funcionesServices.GetFuncionesPorPelicula(seleccion);\r\n\r\n            if (funcionesPorPelicula.Any())\r\n            {\r\n\r\n                Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {seleccion}):\u0022);\r\n\r\n                foreach (var funcion in funcionesPorPelicula)\r\n                {\r\n                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                    string nombredelasala = _salasService.GetSalaNombreById(funcion.SalaId);\r\n                    string nombredelgenero = _generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                    string nombredelapelicula = _peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                    Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\r\n                    Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\r\n                    Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\r\n            }\r\n\r\n            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\r\n            Console.ReadKey();\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\r\n            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n\r\n    public void BusquedaDia(){\r\n        // Listar funciones por d\u00EDa y/o t\u00EDtulo de pel\u00EDcula\r\n        Console.WriteLine(\u0022Bienvenido al buscador de funciones\u0022);\r\n        Console.Write(\u0022Ingrese la fecha (YYYY-MM-DD): \u0022);\r\n        string fechaStr = Console.ReadLine();\r\n        DateTime? fechaFiltro = null;\r\n\r\n        if (!string.IsNullOrEmpty(fechaStr) \u0026\u0026 DateTime.TryParse(fechaStr, out DateTime fechaSeleccionada))\r\n        {\r\n            fechaFiltro = fechaSeleccionada;\r\n        }\r\n\r\n        if (fechaFiltro.HasValue)\r\n        {\r\n            var funcionesFiltradas = _funcionesServices.GetFuncionesPorFecha(fechaFiltro.Value);\r\n\r\n            if (funcionesFiltradas.Any())\r\n            {\r\n                foreach (var funcion in funcionesFiltradas)\r\n                {\r\n                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                    Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\r\n                    string nombredelasala = _salasService.GetSalaNombreById(funcion.SalaId);\r\n                    string nombredelgenero = _generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                    string nombredelapelicula = _peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                    Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\r\n                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\r\n            }\r\n\r\n            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n            Console.ReadKey();\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine(\u0022Fecha no v\u00E1lida.\u0022);\r\n        }\r\n    }\r\n}\r\n\r\n\r\npublic class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);\r\n        var salasQuery = new SalasQuery(context);\r\n        var peliculasQuery = new PeliculaQuery(context);\r\n\r\n        CineManager manager = new CineManager(new FuncionService(funcionesQuery, funcionesCommand), new SalasService(salasQuery), new PeliculasService(peliculasQuery), new GeneroService(generoQuery));\r\n\r\n        while (true)\r\n        {\r\n            Console.Clear();\r\n\r\n            Console.WriteLine(\u0022************\u0022);\r\n            Console.WriteLine(\u0022 Cine GBA\u0022);\r\n            Console.WriteLine(\u0022************\u0022);\r\n            Console.WriteLine(\u0022 \u0022);\r\n            Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n            Console.WriteLine(\u0022 -----------------\u0022);\r\n            Console.WriteLine(\u0022 \u0022);\r\n            Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n            Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n            Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n            Console.WriteLine(\u0022 4. Salir \u0022);\r\n            Console.WriteLine(\u0022 \u0022);\r\n            Console.WriteLine(\u0022******************************\u0022);\r\n            Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n            char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n            Console.WriteLine();\r\n\r\n            switch (option)","Type":1,"Status":2,"FollowUpPrompts":null},"SelectedFunctionName":"Modify","LoggedSkillInvocations":null}
{"version":1,"Request":{"Prompt":"modularizar el siguiente codigo paara que sea mas mantenible:\r\n\r\nusing Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\n\r\n\r\n\r\n\r\n\r\n\r\npublic  class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);\r\n        // Crear una instancia de FuncionesServices\r\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\r\n\r\n        var salasQuery = new SalasQuery(context);\r\n        // Crear una instancia de SalasService\r\n        var salasService = new SalasService( salasQuery);\r\n\r\n        var peliculasQuery = new PeliculaQuery(context);\r\n        // Crear una instancia de PeliculaService\r\n        var peliculasService = new PeliculasService( peliculasQuery);\r\n\r\n        var generoService = new GeneroService(generoQuery);\r\n\r\n\r\n        {\r\n            while (true)\r\n            {\r\n                Console.Clear();\r\n\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 Cine GBA\u0022);\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n                Console.WriteLine(\u0022 -----------------\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n                Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n                Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n                Console.WriteLine(\u0022 4. Salir \u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022******************************\u0022);\r\n                Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n                char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n                Console.WriteLine();\r\n\r\n                switch (option)\r\n                {\r\n\r\n                    case \u00271\u0027:\r\n\r\n                        var nuevaFuncion = new Funcion();\r\n\r\n                        Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\r\n                        DateTime fecha;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out fecha))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Fecha = fecha;\r\n\r\n                        Console.Write(\u0022Horario (HH:mm:ss): \u0022);\r\n                        DateTime horario;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out horario))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Horario no v\u00E1lido. Ingrese un horario en el formato HH:mm:ss.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Horario = horario;\r\n\r\n                        // Listar peliculas disponibles\r\n                        var todaslaspeliculas = peliculasService.GetAllPeliculas();\r\n                        Console.WriteLine(\u0022Peliculas disponibles:\u0022);\r\n                        foreach (var pelicula in todaslaspeliculas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                        }\r\n\r\n                        int peliculaId;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                Console.Write(\u0022Seleccione la pel\u00EDcula (ID): \u0022);\r\n                                if (int.TryParse(Console.ReadLine(), out peliculaId))\r\n                                {\r\n                                    if (todaslaspeliculas.Any(p =\u003E p.PeliculaId == peliculaId))\r\n                                        break;\r\n                                    else\r\n                                        throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                                else\r\n                                {\r\n                                    throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                                }\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.PeliculaId = peliculaId;\r\n\r\n                        // salas disponibles\r\n                        List\u003CSala\u003E salas = salasService.GetAllSalas();\r\n                        Console.WriteLine(\u0022Salas disponibles:\u0022);\r\n                        foreach (var sala in salas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {sala.SalaId}, Nombre: {sala.Nombre}\u0022);\r\n                        }\r\n\r\n                        int salaId;\r\n                        while (true)\r\n                        {\r\n                            Console.Write(\u0022Seleccione la sala (ID): \u0022);\r\n                            if (int.TryParse(Console.ReadLine(), out salaId))\r\n                            {\r\n                                if (salas.Any(s =\u003E s.SalaId == salaId))\r\n                                {\r\n                                    break;\r\n                                }\r\n                                else\r\n                                {\r\n                                    Console.WriteLine(\u0022ID de sala no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022ID de sala no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.SalaId = salaId;\r\n\r\n                        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n                        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                        \r\n                        string peliculaTitulo = peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        string salaNombre = salasService.GetSalaNombreById(nuevaFuncion.SalaId);\r\n                        \r\n                        string generoNombre = generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n                        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n                        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n\r\n                        funcionesServices.CreateFuncion(nuevaFuncion);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n                        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                        Console.ReadKey();\r\n\r\n\r\n\r\n\r\n                        break;\r\n\r\n                    case \u00272\u0027:\r\n\r\n                        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n                        // Traer todas las pel\u00EDculas disponibles\r\n                        var peliculas = peliculasService.GetAllPeliculas();\r\n\r\n                        if (peliculas.Any())\r\n                        {\r\n                            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n                            foreach (var pelicula in peliculas)\r\n                            {\r\n                                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                            }\r\n\r\n                            int seleccion;\r\n                            while (true)\r\n                            {\r\n                                try\r\n                                {\r\n                                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                                    {\r\n                                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                                        {\r\n                                            break;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Console.WriteLine(\u0022ID invalido\u0022);\r\n                                    }\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Console.WriteLine(ex.Message);\r\n                                }\r\n                            }\r\n\r\n                            //  Mostrar las funciones para la pel\u00EDcula seleccionada\r\n                            var funcionesPorPelicula = funcionesServices.GetFuncionesPorPelicula(seleccion);\r\n\r\n                            if (funcionesPorPelicula.Any())\r\n                            {\r\n\r\n                                Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {seleccion}):\u0022);\r\n\r\n                                foreach (var funcion in funcionesPorPelicula)\r\n                                {\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\r\n                                    Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\r\n                                    Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n\r\n                        break;\r\n\r\n\r\n                    case \u00273\u0027:\r\n                        // Listar funciones por d\u00EDa y/o t\u00EDtulo de pel\u00EDcula\r\n                        Console.WriteLine(\u0022Bienvenido al buscador de funciones\u0022);\r\n                        Console.Write(\u0022Ingrese la fecha (YYYY-MM-DD): \u0022);\r\n                        string fechaStr = Console.ReadLine();\r\n                        DateTime? fechaFiltro = null;\r\n\r\n                        if (!string.IsNullOrEmpty(fechaStr) \u0026\u0026 DateTime.TryParse(fechaStr, out DateTime fechaSeleccionada))\r\n                        {\r\n                            fechaFiltro = fechaSeleccionada;\r\n                        }\r\n\r\n                        if (fechaFiltro.HasValue)\r\n                        {\r\n                            var funcionesFiltradas = funcionesServices.GetFuncionesPorFecha(fechaFiltro.Value);\r\n\r\n                            if (funcionesFiltradas.Any())\r\n                            {\r\n                                foreach (var funcion in funcionesFiltradas)\r\n                                {\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022Fecha no v\u00E1lida.\u0022);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \u00274\u0027:\r\n                        return;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","Context":{"VisibleDocuments":[{"Content":"using Application.Service;\r\nusing Domain;\r\nusing Infrastructure;\r\nusing Infrastructure.Command;\r\nusing Infrastructure.Query;\r\n\r\n\r\n\r\n\r\n\r\n\r\npublic  class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var context = new CineDdContext();\r\n\r\n        var generoQuery = new GeneroQuery(context);\r\n        var funcionesQuery = new FuncionesQuery(context);\r\n        var funcionesCommand = new FuncionesCommand(context);\r\n        // Crear una instancia de FuncionesServices\r\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\r\n\r\n        var salasQuery = new SalasQuery(context);\r\n        // Crear una instancia de SalasService\r\n        var salasService = new SalasService( salasQuery);\r\n\r\n        var peliculasQuery = new PeliculaQuery(context);\r\n        // Crear una instancia de PeliculaService\r\n        var peliculasService = new PeliculasService( peliculasQuery);\r\n\r\n        var generoService = new GeneroService(generoQuery);\r\n\r\n\r\n        {\r\n            while (true)\r\n            {\r\n                Console.Clear();\r\n\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 Cine GBA\u0022);\r\n                Console.WriteLine(\u0022************\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\r\n                Console.WriteLine(\u0022 -----------------\u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\r\n                Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\r\n                Console.WriteLine(\u0022 3. Funciones por dia \u0022);\r\n                Console.WriteLine(\u0022 4. Salir \u0022);\r\n                Console.WriteLine(\u0022 \u0022);\r\n                Console.WriteLine(\u0022******************************\u0022);\r\n                Console.Write(\u0022Ingrese  una opci\u00F3n: \u0022);\r\n\r\n                char option = Char.ToUpper(Console.ReadKey().KeyChar);\r\n                Console.WriteLine();\r\n\r\n                switch (option)\r\n                {\r\n\r\n                    case \u00271\u0027:\r\n\r\n                        var nuevaFuncion = new Funcion();\r\n\r\n                        Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\r\n                        DateTime fecha;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out fecha))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Fecha = fecha;\r\n\r\n                        Console.Write(\u0022Horario (HH:mm:ss): \u0022);\r\n                        DateTime horario;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                if (DateTime.TryParse(Console.ReadLine(), out horario))\r\n                                    break;\r\n                                else\r\n                                    throw new Exception(\u0022Horario no v\u00E1lido. Ingrese un horario en el formato HH:mm:ss.\u0022);\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.Horario = horario;\r\n\r\n                        // Listar peliculas disponibles\r\n                        var todaslaspeliculas = peliculasService.GetAllPeliculas();\r\n                        Console.WriteLine(\u0022Peliculas disponibles:\u0022);\r\n                        foreach (var pelicula in todaslaspeliculas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                        }\r\n\r\n                        int peliculaId;\r\n                        while (true)\r\n                        {\r\n                            try\r\n                            {\r\n                                Console.Write(\u0022Seleccione la pel\u00EDcula (ID): \u0022);\r\n                                if (int.TryParse(Console.ReadLine(), out peliculaId))\r\n                                {\r\n                                    if (todaslaspeliculas.Any(p =\u003E p.PeliculaId == peliculaId))\r\n                                        break;\r\n                                    else\r\n                                        throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                                else\r\n                                {\r\n                                    throw new Exception(\u0022ID de pel\u00EDcula no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                                }\r\n                            }\r\n                            catch (Exception ex)\r\n                            {\r\n                                Console.WriteLine(ex.Message);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.PeliculaId = peliculaId;\r\n\r\n                        // salas disponibles\r\n                        List\u003CSala\u003E salas = salasService.GetAllSalas();\r\n                        Console.WriteLine(\u0022Salas disponibles:\u0022);\r\n                        foreach (var sala in salas)\r\n                        {\r\n                            Console.WriteLine($\u0022ID: {sala.SalaId}, Nombre: {sala.Nombre}\u0022);\r\n                        }\r\n\r\n                        int salaId;\r\n                        while (true)\r\n                        {\r\n                            Console.Write(\u0022Seleccione la sala (ID): \u0022);\r\n                            if (int.TryParse(Console.ReadLine(), out salaId))\r\n                            {\r\n                                if (salas.Any(s =\u003E s.SalaId == salaId))\r\n                                {\r\n                                    break;\r\n                                }\r\n                                else\r\n                                {\r\n                                    Console.WriteLine(\u0022ID de sala no v\u00E1lido. Seleccione un ID v\u00E1lido.\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022ID de sala no v\u00E1lido. Ingrese un n\u00FAmero.\u0022);\r\n                            }\r\n                        }\r\n                        nuevaFuncion.SalaId = salaId;\r\n\r\n                        // Se muestra un resumen de los campos seleccionados por el operador antes de confirmar el alta\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\r\n                        Console.WriteLine($\u0022Fecha: {nuevaFuncion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Horario: {nuevaFuncion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                        \r\n                        string peliculaTitulo = peliculasService.GetPeliculaTituloById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        string salaNombre = salasService.GetSalaNombreById(nuevaFuncion.SalaId);\r\n                        \r\n                        string generoNombre = generoService.GetGeneroNombreById(nuevaFuncion.PeliculaId);\r\n                        \r\n                        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\r\n                        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\r\n                        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\r\n\r\n                        funcionesServices.CreateFuncion(nuevaFuncion);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022 \u0022);\r\n                        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\r\n                        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                        Console.ReadKey();\r\n\r\n\r\n\r\n\r\n                        break;\r\n\r\n                    case \u00272\u0027:\r\n\r\n                        Console.WriteLine(\u0022Buscador de funciones por pel\u00EDcula: \u0022);\r\n\r\n                        // Traer todas las pel\u00EDculas disponibles\r\n                        var peliculas = peliculasService.GetAllPeliculas();\r\n\r\n                        if (peliculas.Any())\r\n                        {\r\n                            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\r\n                            foreach (var pelicula in peliculas)\r\n                            {\r\n                                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\r\n                            }\r\n\r\n                            int seleccion;\r\n                            while (true)\r\n                            {\r\n                                try\r\n                                {\r\n                                    Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\r\n                                    if (int.TryParse(Console.ReadLine(), out seleccion))\r\n                                    {\r\n                                        if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\r\n                                        {\r\n                                            break;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            Console.WriteLine(\u0022ID invalido.\u0022);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        Console.WriteLine(\u0022ID invalido\u0022);\r\n                                    }\r\n                                }\r\n                                catch (Exception ex)\r\n                                {\r\n                                    Console.WriteLine(ex.Message);\r\n                                }\r\n                            }\r\n\r\n                            //  Mostrar las funciones para la pel\u00EDcula seleccionada\r\n                            var funcionesPorPelicula = funcionesServices.GetFuncionesPorPelicula(seleccion);\r\n\r\n                            if (funcionesPorPelicula.Any())\r\n                            {\r\n\r\n                                Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {seleccion}):\u0022);\r\n\r\n                                foreach (var funcion in funcionesPorPelicula)\r\n                                {\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\r\n                                    Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\r\n                                    Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n\r\n                        break;\r\n\r\n\r\n                    case \u00273\u0027:\r\n                        // Listar funciones por d\u00EDa y/o t\u00EDtulo de pel\u00EDcula\r\n                        Console.WriteLine(\u0022Bienvenido al buscador de funciones\u0022);\r\n                        Console.Write(\u0022Ingrese la fecha (YYYY-MM-DD): \u0022);\r\n                        string fechaStr = Console.ReadLine();\r\n                        DateTime? fechaFiltro = null;\r\n\r\n                        if (!string.IsNullOrEmpty(fechaStr) \u0026\u0026 DateTime.TryParse(fechaStr, out DateTime fechaSeleccionada))\r\n                        {\r\n                            fechaFiltro = fechaSeleccionada;\r\n                        }\r\n\r\n                        if (fechaFiltro.HasValue)\r\n                        {\r\n                            var funcionesFiltradas = funcionesServices.GetFuncionesPorFecha(fechaFiltro.Value);\r\n\r\n                            if (funcionesFiltradas.Any())\r\n                            {\r\n                                foreach (var funcion in funcionesFiltradas)\r\n                                {\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                    Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\r\n                                    Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\r\n                                    string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\r\n                                    string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\r\n                                    string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\r\n                                    Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\r\n                                    Console.WriteLine(\u0022--------------------------------------------\u0022);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\r\n                            }\r\n\r\n                            Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\r\n                            Console.ReadKey();\r\n                        }\r\n                        else\r\n                        {\r\n                            Console.WriteLine(\u0022Fecha no v\u00E1lida.\u0022);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \u00274\u0027:\r\n                        return;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","Selections":[{"Caret":15096,"Start":0,"End":15096}],"FilePath":"C:\\Users\\aacar\\source\\repos\\CineConsole\\CineConsole\\CineConsole\\Program.cs","Language":"C#"}],"PreSelectedSkill":null,"CorrelationId":{"Guid":"66563ee0-bf44-4306-9871-314eed1ee662"}}},"Response":{"Content":"\u0060\u0060\u0060\nusing Application.Service;\nusing Domain;\nusing Infrastructure;\nusing Infrastructure.Command;\nusing Infrastructure.Query;\n\npublic static class CineUtils \n{\n    public static int SelectOption(string message)\n    {\n        Console.WriteLine(message);\n        char option = Char.ToUpper(Console.ReadKey().KeyChar);\n        Console.WriteLine();\n        return option;\n    }\n\n    public static void PrintFunctionData(Funcion funcion,\n        IPeliculasService peliculasService,\n        ISalasService salasService,\n        IGeneroService generoService)\n    {\n        Console.WriteLine();\n        Console.WriteLine(\u0022Datos de la nueva funci\u00F3n:\u0022);\n        Console.WriteLine($\u0022Fecha: {funcion.Fecha:yyyy-MM-dd}, Horario: {funcion.Horario:HH:mm:ss}\u0022);\n        \n        string peliculaTitulo = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\n        \n        string salaNombre = salasService.GetSalaNombreById(funcion.SalaId);\n        \n        string generoNombre = generoService.GetGeneroNombreById(funcion.PeliculaId);\n        \n        Console.WriteLine($\u0022Pel\u00EDcula: {peliculaTitulo}\u0022);\n        Console.WriteLine($\u0022Genero: {generoNombre} \u0022);\n        Console.WriteLine($\u0022Sala: {salaNombre}\u0022);\n    }\n\n    public static void RegisterFunction(\n        IFuncionesService funcionesService,\n        IPeliculasService peliculasService,\n        ISalasService salasService,\n        IGeneroService generoService,\n        Funcion nuevaFuncion)\n    {\n        funcionesService.CreateFuncion(nuevaFuncion);\n        Console.WriteLine(\u0022 \u0022);\n        Console.WriteLine(\u0022 \u0022);\n        Console.WriteLine(\u0022Funci\u00F3n registrada.\u0022);\n        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\n        Console.ReadKey();\n    }\n\n    public static void ShowMovies(\n        IEnumerable\u003CPelicula\u003E peliculas)\n    {\n        if (peliculas.Any())\n        {\n            Console.WriteLine(\u0022Funciones para la pelicula:\u0022);\n            foreach (var pelicula in peliculas)\n            {\n                Console.WriteLine($\u0022ID: {pelicula.PeliculaId}, T\u00EDtulo: {pelicula.Titulo}\u0022);\n            }\n        }\n        else\n        {\n            Console.WriteLine(\u0022No hay pel\u00EDculas disponibles.\u0022);\n        }\n    }\n\n    public static int ChooseMovie(string message, IEnumerable\u003CPelicula\u003E peliculas)\n    {\n        Console.WriteLine(message);\n\n        int seleccion;\n        while (true)\n        {\n            try\n            {\n                Console.Write(\u0022Seleccione la pel\u00EDcula: \u0022);\n                if (int.TryParse(Console.ReadLine(), out seleccion))\n                {\n                    if (peliculas.Any(p =\u003E p.PeliculaId == seleccion))\n                    {\n                        break;\n                    }\n                    else\n                    {\n                        Console.WriteLine(\u0022ID invalido.\u0022);\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\u0022ID invalido\u0022);\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n        }\n        return seleccion;\n    }\n\n    public static void ShowFunctionsByMovie(\n        IEnumerable\u003CFuncion\u003E funcionesPorPelicula,\n        IPeliculasService peliculasService,\n        ISalasService salasService,\n        IGeneroService generoService)\n    {\n        if (funcionesPorPelicula.Any())\n        {\n\n            Console.WriteLine($\u0022Funciones para la pel\u00EDcula (ID: {funcionesPorPelicula.First().PeliculaId}):\u0022);\n\n            foreach (var funcion in funcionesPorPelicula)\n            {\n                Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\n                string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\n                string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\n                string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\n                Console.WriteLine($\u0022Sala: {nombredelasala} \u0022);\n                Console.WriteLine($\u0022Pel\u00EDcula: {nombredelapelicula} \u0022);\n                Console.WriteLine($\u0022Genero: {nombredelgenero}\u0022);\n            }\n        }\n        else\n        {\n            Console.WriteLine(\u0022 Pel\u00EDcula seleccionada sin funciones activas.\u0022);\n        }\n        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal...\u0022);\n        Console.ReadKey();\n    }\n\n    public static void ShowFilteredFunctions(\n        IEnumerable\u003CFuncion\u003E funcionesFiltradas,\n        IPeliculasService peliculasService,\n        ISalasService salasService,\n        IGeneroService generoService)\n    {\n        if (funcionesFiltradas.Any())\n        {\n            foreach (var funcion in funcionesFiltradas)\n            {\n                Console.WriteLine(\u0022--------------------------------------------\u0022);\n                Console.WriteLine($\u0022Funcion N\u00B0: {funcion.FuncionId}, Fecha: {funcion.Fecha.ToString(\u0022yyyy-MM-dd\u0022)}, Hora: {funcion.Horario.ToString(\u0022HH:mm:ss\u0022)}\u0022);\n                Console.WriteLine($\u0022Pelicula: {funcion.Peliculas.Titulo}, Sala: {funcion.Salas.Nombre}\u0022);\n                string nombredelasala = salasService.GetSalaNombreById(funcion.SalaId);\n                string nombredelgenero = generoService.GetGeneroNombreById(funcion.PeliculaId);\n                string nombredelapelicula = peliculasService.GetPeliculaTituloById(funcion.PeliculaId);\n                Console.WriteLine($\u0022{nombredelasala}, Pel\u00EDcula: {nombredelapelicula}, Genero: {nombredelgenero}\u0022);\n                Console.WriteLine(\u0022--------------------------------------------\u0022);\n            }\n        }\n        else\n        {\n            Console.WriteLine(\u0022Fecha seleccionada sin funciones activas.\u0022);\n        }\n\n        Console.WriteLine(\u0022Presione cualquier tecla para volver al men\u00FA principal\u0022);\n        Console.ReadKey();\n    }\n}\n\npublic class Program\n{\n    static void Main(string[] args)\n    {\n        var context = new CineDdContext();\n\n        var generoQuery = new GeneroQuery(context);\n        var funcionesQuery = new FuncionesQuery(context);\n        var funcionesCommand = new FuncionesCommand(context);\n        var funcionesServices = new FuncionService(funcionesQuery, funcionesCommand);\n\n        var salasQuery = new SalasQuery(context);\n        var salasService = new SalasService(salasQuery);\n\n        var peliculasQuery = new PeliculaQuery(context);\n        var peliculasService = new PeliculasService(peliculasQuery);\n\n        var generoService = new GeneroService(generoQuery);\n\n        while (true)\n        {\n            Console.Clear();\n\n            Console.WriteLine(\u0022************\u0022);\n            Console.WriteLine(\u0022 Cine GBA\u0022);\n            Console.WriteLine(\u0022************\u0022);\n            Console.WriteLine(\u0022 \u0022);\n            Console.WriteLine(\u0022 Men\u00FA de Opciones \u0022);\n            Console.WriteLine(\u0022 -----------------\u0022);\n            Console.WriteLine(\u0022 \u0022);\n            Console.WriteLine(\u0022 1. Nueva Funcion \u0022);\n            Console.WriteLine(\u0022 2. Funciones por pelicula \u0022);\n            Console.WriteLine(\u0022 3. Funciones por dia \u0022);\n            Console.WriteLine(\u0022 4. Salir \u0022);\n            Console.WriteLine(\u0022 \u0022);\n            Console.WriteLine(\u0022******************************\u0022);\n            Console.Write(\u0022Ingrese una opci\u00F3n: \u0022);\n\n            char option = CineUtils.SelectOption(Console.ReadLine());\n\n            switch (option)\n            {\n\n                case \u00271\u0027:\n\n                    var nuevaFuncion = new Funcion();\n\n                    Console.Write(\u0022Fecha (YYYY-MM-DD): \u0022);\n                    DateTime fecha;\n                    while (true)\n                    {\n                        try\n                        {\n                            if (DateTime.TryParse(Console.ReadLine(), out fecha))\n                                break;\n                            else\n                                throw new Exception(\u0022Formato incorrecto. Utilice el formato YYYY-MM-DD.\u0022);\n                        }\n                        catch (Exception ex)\n                        {\n                            Console.WriteLine(ex.Message);\n                        }\n                    }\n                    nuevaFuncion.Fecha = fecha;\n\n                    Console.Write(\u0022Horario (HH","Type":1,"Status":2,"FollowUpPrompts":null},"SelectedFunctionName":"Modify","LoggedSkillInvocations":null}
